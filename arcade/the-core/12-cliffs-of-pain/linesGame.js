const assert = require('assert')

function linesGame (field, clicks, newBalls, newBallsCoordinates) {
  let score = 0
  let firstClick
  let secondClick
  let hasClearPath
  let newBallIndex = 0

  for (let c = 0; c < clicks.length - 1; c++) {
    firstClick = clicks[c]
    secondClick = clicks[c + 1]

    if (!isBall(firstClick, field)) {
      // Ignore both clicks
      c++
      hasClearPath = false
    } else {
      if (isBall(secondClick, field)) {
        hasClearPath = false
      } else {
        hasClearPath = determineClearPath(firstClick, secondClick, field)
        c++
      }
    }

    if (hasClearPath) {
      field[secondClick[0]][secondClick[1]] = field[firstClick[0]][firstClick[1]]
      field[firstClick[0]][firstClick[1]] = '.'
    }

    const tempScore = scoreMove(field)
    score += tempScore

    if (hasClearPath && tempScore === 0) {
      for (let i = 0; i < 3; i++) {
        const [row, col] = newBallsCoordinates[newBallIndex]
        field[row][col] = newBalls[newBallIndex]
        newBallIndex++
      }
    }

    score += scoreMove(field)
  }

  return score
}

function isBall (click, field) {
  return field[click[0]][click[1]] !== '.'
}

function determineClearPath (origin, destination, field, history = {}) {
  if (origin.join() === destination.join()) return true
  if (history[origin.join()]) return false

  history[origin.join()] = true

  const [originRow, originCol] = origin
  const isEmpty = ([row, col]) => field[row][col] === '.'

  let isAboveValid = false
  let isBelowValid = false
  let isLeftValid = false
  let isRightValid = false

  isAboveValid = originRow > 0 &&
    isEmpty([originRow - 1, originCol]) &&
    determineClearPath([originRow - 1, originCol], destination, field, history)

  isBelowValid = originRow < 8 &&
    isEmpty([originRow + 1, originCol]) &&
    determineClearPath([originRow + 1, originCol], destination, field, history)

  isLeftValid = originCol > 0 &&
    isEmpty([originRow, originCol - 1]) &&
    determineClearPath([originRow, originCol - 1], destination, field, history)

  isRightValid = originCol < 8 &&
    isEmpty([originRow, originCol + 1]) &&
    determineClearPath([originRow, originCol + 1], destination, field, history)

  return isAboveValid || isBelowValid || isLeftValid || isRightValid
}

function scoreMove (field) {
  const lines = []
  let line = []

  const score = (row, col, doTerminate) => {
    const block = field[row][col]
    const matchesFirstChar = line.length > 0 && block === field[line[0][0]][line[0][1]]

    if (matchesFirstChar) {
      line.push([row, col])

      if (!doTerminate) return false
    }

    if (line.length > 4) {
      lines.push(line)
      return true
    }

    line = (block !== '.') ? [[row, col]] : []

    return false
  }

  // Check horizontal
  for (let row = 0; row < 9; row++) {
    line = []
    for (let col = 0; col < 9; col++) {
      if (score(row, col, col === 8)) break
    }
  }

  // Check vertical
  for (let col = 0; col < 9; col++) {
    line = []
    for (let row = 0; row < 9; row++) {
      if (score(row, col, row === 8)) break
    }
  }

  for (let c = 0; c < 9; c++) {
    line = []
    for (let r = 0; c + r < 9; r++) {
      // At top, moving right. ex. 1,3; 2,4; 3,5; 4,6; 5,7; 6,8
      if (score(r, c + r, c + r === 8)) break
    }

    line = []
    for (let r = 0; 8 - c - r > -1; r++) {
      // At top, moving left. ex. 1,7; 2,6; 3,5; 4,4; 5,3; 6;2
      // (0,7; 1,6;) 2,5; 3,4; 4,3; 5,2; 6,1; 7,0
      if (score(r, 8 - c - r, 8 - c - r === 0)) break
    }

    if (c > 0) {
      line = []
      for (let r = 8; c + 8 - r < 9; r--) {
        // At bottom, moving right. ex. 8,0; 7,1; 6,2; 5,3 | 8,3; 7,4; 6,5...
        // 8,3; 7,4; 6,5; 5,6; 4,7; 5, 8
        if (score(r, c + 8 - r, c + 8 - r === 8)) break
      }

      line = []
      for (let r = 8; r - c > -1; r--) {
        // At bottom, moving left. ex. 8,5; 7,4; 6,3; 5,2; 4,1; 3,0
        if (score(r, r - c, r - c === 0)) break
      }
    }
  }

  const a = lines.length
  const b = lines.reduce((acc, val) => acc + val.length, 0)

  clearLines(field, lines)

  if (a > 0) return a + b - 1

  return 0
}

function clearLines (field, lines) {
  lines.forEach(line => line.forEach(([r, c]) => (field[r][c] = '.')))
}

// Clear path tests
assert.strictEqual(
  determineClearPath(
    [0, 7],
    [6, 7],
    [
      [ '.', '.', '.', '.', '.', '.', '.', 'G', '.' ],
      [ 'G', '.', '.', '.', '.', '.', '.', 'G', '.' ],
      [ '.', 'G', '.', '.', '.', '.', '.', 'G', '.' ],
      [ '.', '.', 'G', '.', '.', '.', '.', 'G', 'G' ],
      [ 'G', 'G', 'G', '.', 'G', 'G', '.', '.', '.' ],
      [ '.', '.', '.', '.', 'G', '.', 'G', 'G', '.' ],
      [ '.', '.', '.', '.', '.', 'G', '.', '.', '.' ],
      [ '.', '.', '.', '.', 'G', '.', '.', 'G', '.' ],
      [ '.', '.', '.', 'G', '.', '.', '.', 'G', '.' ]
    ]),
  true
)

// Scoring tests
assert.strictEqual(
  // a = 2; b = 12; x = 13
  scoreMove([
    ['.', 'O', '.', '.', '.', '.', '.', 'O', '.'],
    ['.', '.', 'O', '.', '.', '.', 'O', '.', '.'],
    ['.', '.', '.', 'O', '.', 'O', '.', '.', '.'],
    ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
    ['.', '.', '.', 'O', '.', 'O', '.', '.', '.'],
    ['.', '.', 'O', '.', '.', '.', 'O', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.']]),
  13
)

// Diag from top, center line
assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', 'O', '.'],
    ['.', '.', '.', '.', '.', '.', 'O', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', '.', '.', '.'],
    ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
    ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
    ['.', '.', 'O', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.']]),
  6
)

// Diag from top, going right, center line
assert.strictEqual(
  // a = 1; b = 8; x = 8
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', 'R', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', 'R', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', 'R', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', 'R', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'R', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', 'R', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', 'R', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', 'R']]),
  8
)

// Terminating at 0
assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', '.', '.', '.'],
    ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
    ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
    ['.', '.', 'O', '.', '.', '.', '.', '.', '.'],
    ['.', 'O', '.', '.', '.', '.', '.', '.', '.'],
    ['O', '.', '.', '.', '.', '.', '.', '.', '.']]),
  6
)

// Terminating at 0
assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'R', '.', '.', '.'],
    ['.', '.', '.', '.', 'R', '.', '.', '.', '.'],
    ['.', '.', '.', 'R', '.', '.', '.', '.', '.'],
    ['.', '.', 'R', '.', '.', '.', '.', '.', '.'],
    ['.', 'R', '.', '.', '.', '.', '.', '.', '.'],
    ['R', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.']]),
  6
)

// Diag from right
assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', 'R', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', 'R', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'R', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', 'R', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', 'R', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', 'R'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.']]),
  6
)

// Diag from bottom, going right
assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', 'O'],
    ['.', '.', '.', '.', '.', '.', '.', 'O', '.'],
    ['.', '.', '.', '.', '.', '.', 'O', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', '.', '.', '.'],
    ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
    ['.', '.', '.', 'O', '.', '.', '.', '.', '.']]),
  6
)

// Diag from bottom, going left
assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['R', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', 'R', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', 'R', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', 'R', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', 'R', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'R', '.', '.', '.']]),
  6
)

assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', 'O', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', 'O', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', 'O', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.']]),
  6
)

assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', 'O', '.'],
    ['.', '.', '.', '.', '.', '.', 'O', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', '.', '.', '.'],
    ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
    ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
    ['.', '.', 'O', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.']]),
  6
)

assert.strictEqual(
  // a = 1; b = 6; x = 6
  scoreMove([
    ['.', '.', '.', '.', '.', '.', '.', 'O', '.'],
    ['.', '.', '.', '.', '.', '.', 'O', '.', '.'],
    ['.', '.', '.', '.', '.', 'O', '.', '.', '.'],
    ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
    ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
    ['.', '.', 'O', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.']]),
  6
)

assert.strictEqual(
  // a = 2; b = 12
  13,
  scoreMove([
    [ '.', '.', '.', '.', '.', '.', '.', '.', '.' ],
    [ 'G', '.', '.', '.', '.', '.', '.', '.', '.' ],
    [ '.', 'G', '.', '.', '.', '.', '.', '.', '.' ],
    [ '.', '.', 'G', '.', '.', '.', '.', '.', 'G' ],
    [ 'G', 'G', 'G', 'G', 'G', 'G', '.', '.', '.' ],
    [ '.', '.', '.', '.', 'G', '.', 'G', '.', '.' ],
    [ '.', '.', '.', '.', '.', 'G', '.', '.', '.' ],
    [ '.', '.', '.', '.', 'G', '.', '.', '.', '.' ],
    [ '.', '.', '.', 'G', '.', '.', '.', '.', '.' ] ])
)
assert.strictEqual(
  // a = 1, b = 9
  9,
  scoreMove(
    [
      ['.', 'G', '.', 'O', '.', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', '.', '.', '.', 'V', '.'],
      ['.', 'O', '.', 'O', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', '.', '.', '.', '.', 'O'],
      ['.', '.', '.', 'O', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
      ['R', '.', '.', 'O', '.', '.', '.', 'B', 'R'],
      ['.', '.', 'C', 'O', '.', '.', '.', 'Y', 'O']
    ]
  )
)
assert.strictEqual(
  // a = 1; b = 5
  5,
  scoreMove(
    [
      ['.', 'G', '.', 'O', '.', '.', '.', '.', '.'],
      ['V', 'V', 'V', 'V', 'V', '.', 'V', 'V', 'V'],
      ['.', 'O', '.', 'O', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', '.', '.', '.', '.', 'O'],
      ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
      ['R', '.', '.', 'O', '.', '.', '.', 'B', 'R'],
      ['.', '.', 'C', 'O', '.', '.', '.', 'Y', 'O']
    ]
  )
)
assert.strictEqual(
  // a = 1; b = 5
  5,
  scoreMove(
    [
      ['V', 'G', '.', 'O', '.', '.', '.', '.', '.'],
      ['V', 'V', 'V', 'B', 'V', 'V', 'B', 'V', 'V'],
      ['.', 'O', 'V', 'O', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'V', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', 'V', '.', '.', '.', 'O'],
      ['.', '.', '.', 'O', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', 'V', '.', '.'],
      ['R', '.', '.', 'O', '.', '.', '.', 'V', 'R'],
      ['.', '.', 'C', 'O', '.', '.', '.', 'Y', 'V']
    ]
  )
)

assert.strictEqual(
  // a = 2; b = 14 (9 diag, 5 across)
  15,
  scoreMove(
    [
      ['V', 'G', '.', 'O', '.', '.', '.', '.', '.'],
      ['V', 'V', 'V', 'B', 'V', 'V', 'V', 'V', 'V'],
      ['.', 'O', 'V', 'O', 'O', '.', 'NOPE', '.', '.'],
      ['.', '.', '.', 'V', 'O', 'V', '.', '.', '.'],
      ['.', '.', '.', 'O', 'V', '.', '.', '.', 'O'],
      ['.', '.', '.', 'V', 'O', 'V', '.', '.', '.'],
      ['.', '.', '.', 'O', '.', '.', 'V', '.', '.'],
      ['R', '.', '.', 'O', '.', '.', '.', 'V', 'R'],
      ['.', '.', 'C', 'O', '.', '.', '.', 'Y', 'V']
    ]
  )
)

assert.strictEqual(
  // a = 3; b = 15 = 3 + 15 - 1 = 17
  17,
  scoreMove(
    [
      [ '.', '.', '.', '.', '.', '.', '.', '.', '.' ],
      [ '.', '.', '.', '.', '.', '.', '.', '.', '.' ],
      [ '.', '.', 'O', '.', 'O', '.', 'O', '.', '.' ],
      [ '.', '.', '.', 'O', 'O', 'O', '.', '.', '.' ],
      [ '.', '.', '.', '.', 'O', '.', '.', '.', '.' ],
      [ '.', '.', '.', 'O', 'O', 'O', '.', '.', '.' ],
      [ '.', '.', 'O', '.', 'O', '.', 'O', '.', '.' ],
      [ '.', '.', '.', '.', '.', '.', '.', '.', '.' ],
      [ '.', '.', '.', '.', '.', '.', '.', '.', '.' ]
    ]
  )
)

const makeTest = (f, c, nb, nbc, x) => ({ f, c, nb, nbc, x })
const tests = [
  /*
  The only correct moves were:
    Orange ball moved from [2, 1] to [4, 4];
    Red ball moved from [1, 2] to [1, 4];
    Orange ball moved from [4, 8] to [6, 4]
  */
  makeTest(
    [
      ['.', 'G', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', 'V', '.'],
      ['.', 'O', '.', '.', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', 'O'],
      ['.', '.', '.', '.', 'O', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['R', '.', '.', '.', '.', '.', '.', 'B', 'R'],
      ['.', '.', 'C', '.', '.', '.', '.', 'Y', 'O']
    ],
    [[4, 8],
      [2, 1],
      [4, 4],
      [6, 4],
      [4, 8],
      [1, 2],
      [1, 4],
      [4, 8],
      [6, 4]],
    ['R',
      'V',
      'C',
      'G',
      'Y',
      'O'],
    [[1, 2],
      [8, 5],
      [8, 6],
      [1, 1],
      [1, 8],
      [7, 4]],
    6
  ),

  makeTest(
    [['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', 'O', '.', 'O', '.', 'O', '.', '.'],
      ['.', '.', '.', 'O', 'O', 'O', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', 'O'],
      ['.', '.', '.', 'O', 'O', 'O', '.', '.', '.'],
      ['.', '.', 'O', '.', 'O', '.', 'O', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.']],
    [[4, 8],
      [4, 4]],
    [], [],
    17
  ),

  makeTest(
    [['O', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', 'O', '.'],
      ['.', '.', '.', '.', '.', '.', 'O', '.', '.'],
      ['.', '.', '.', '.', '.', 'O', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', 'O', '.', '.', '.', '.', '.'],
      ['.', '.', 'O', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.']],
    [[0, 0], [4, 4]],
    [],
    [],
    6
  ),

  makeTest(
    [['V', '.', '.', '.', 'O', '.', '.', '.', 'O'],
      ['V', 'O', '.', '.', 'O', '.', '.', 'O', 'V'],
      ['V', '.', 'O', '.', 'O', '.', 'O', '.', '.'],
      ['V', '.', '.', 'O', 'O', 'O', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', 'O'],
      ['V', '.', '.', 'O', 'O', 'O', '.', '.', '.'],
      ['V', '.', 'O', '.', 'O', '.', 'O', '.', '.'],
      ['V', 'O', '.', '.', 'O', '.', '.', 'O', '.'],
      ['V', '.', '.', '.', 'O', '.', '.', '.', 'O']],
    [[4, 8],
      [4, 4],
      [1, 8],
      [4, 0]],
    [],
    [],
    36
  ),

  makeTest(
    [['V', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['V', '.', '.', '.', '.', '.', '.', '.', 'V'],
      ['V', '.', 'O', '.', 'O', '.', 'O', '.', '.'],
      ['V', '.', '.', 'O', 'O', 'O', '.', '.', '.'],
      ['.', 'V', 'V', 'V', '.', '.', '.', '.', 'O'],
      ['V', '.', '.', 'O', 'O', 'O', '.', '.', '.'],
      ['V', '.', 'O', '.', 'O', '.', 'O', '.', '.'],
      ['V', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['V', '.', '.', '.', '.', '.', '.', '.', '.']],
    [[4, 8],
      [4, 4],
      [1, 8],
      [4, 0]],
    [],
    [],
    17
  ),

  makeTest(
    [['.', '.', '.', 'G', 'G', '.', '.', 'G', '.'],
      ['G', '.', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', 'G', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', '.', 'G', '.', '.', '.', '.', 'G', 'G'],
      ['G', 'G', 'G', '.', 'G', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', 'G', 'G', '.'],
      ['.', '.', '.', '.', '.', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', '.', '.', '.'],
      ['.', '.', '.', 'G', '.', '.', '.', '.', '.']],
    [[0, 3],
      [4, 7],
      [0, 4],
      [4, 3]],
    [],
    [],
    25
  ),

  // Hidden
  makeTest(
    [
      ['.', 'R', 'R', 'R', '.', 'R', '.', 'G', '.'],
      ['G', '.', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', 'G', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', '.', 'G', '.', '.', '.', '.', 'G', 'G'],
      ['G', 'G', 'G', '.', 'G', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', 'G', 'G', '.'],
      ['.', '.', '.', '.', '.', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', '.', '.', '.'],
      ['.', '.', '.', 'G', '.', '.', '.', '.', '.']],
    [[0, 5], [0, 4]],
    ['G', 'G', 'R'],
    [[4, 3], [4, 7], [0, 0]],
    33
  ),

  makeTest(
    [
      ['R', 'R', 'R', 'R', '.', 'R', '.', 'G', '.'],
      ['G', '.', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', 'G', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', '.', 'G', '.', '.', '.', '.', 'G', 'G'],
      ['G', 'G', 'G', '.', 'G', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', 'G', 'G', '.'],
      ['.', '.', '.', '.', '.', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', '.', '.', '.'],
      ['.', '.', '.', 'G', '.', '.', '.', '.', '.']],
    [[0, 5], [0, 4]],
    ['G', 'G', 'R'],
    [[4, 3], [4, 7], [0, 0]],
    5
  ),

  makeTest(
    [['R', 'R', 'R', 'R', '.', 'R', '.', 'G', '.'],
      ['G', '.', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', 'G', '.', '.', '.', '.', '.', 'G', '.'],
      ['.', '.', 'G', '.', '.', '.', '.', 'G', 'G'],
      ['G', 'G', 'G', '.', 'G', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', 'G', 'G', '.'],
      ['.', '.', '.', '.', '.', 'G', '.', '.', '.'],
      ['.', '.', '.', '.', 'G', '.', '.', 'G', '.'],
      ['.', '.', '.', 'G', '.', '.', '.', 'G', '.']],
    [[0, 5],
      [0, 4],
      [0, 7],
      [6, 7]],
    ['G',
      'G',
      'R'],
    [[4, 3],
      [4, 7],
      [0, 0]],
    34
  ),

  makeTest(
    [
      ['Y', '.', '.', '.', '.', '.', '.', '.', 'Y'],
      ['.', 'Y', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', 'Y', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', 'Y', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', 'Y', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', 'Y', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', 'Y', '.'],
      ['.', '.', '.', '.', 'Y', 'Y', 'Y', 'Y', '.']],
    [[0, 8],
      [8, 8],
      [0, 0],
      [8, 8]],
    ['G',
      'Y',
      'Y'],
    [[0, 1],
      [4, 4],
      [0, 0]],
    14
  ),

  makeTest(
    [
      ['R', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.']],
    [[0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 1],
      [0, 1],
      [0, 0]],
    ['G',
      'G',
      'G',
      'G',
      'R',
      'R',
      'R',
      'R',
      'Y',
      'G',
      'G',
      'G',
      'G',
      'R',
      'R',
      'R',
      'R',
      'Y',
      'G',
      'G',
      'G',
      'G',
      'R',
      'R',
      'R',
      'R',
      'Y',
      'G',
      'G',
      'G',
      'G',
      'R',
      'R',
      'R',
      'R',
      'Y',
      'O',
      'V',
      'O',
      'V',
      'O',
      'V',
      'O',
      'V',
      'C',
      'O',
      'V',
      'O',
      'V',
      'O',
      'V',
      'O',
      'V',
      'Y',
      'O',
      'V',
      'O',
      'R',
      'Y',
      'C'],
    [[1, 0],
      [1, 1],
      [1, 2],
      [1, 3],
      [1, 4],
      [1, 5],
      [1, 6],
      [1, 7],
      [1, 8],
      [2, 0],
      [2, 1],
      [2, 2],
      [2, 3],
      [2, 4],
      [2, 5],
      [2, 6],
      [2, 7],
      [2, 8],
      [3, 0],
      [3, 1],
      [3, 2],
      [3, 3],
      [3, 4],
      [3, 5],
      [3, 6],
      [3, 7],
      [3, 8],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [4, 5],
      [4, 6],
      [4, 7],
      [4, 8],
      [5, 0],
      [5, 1],
      [5, 2],
      [5, 3],
      [5, 4],
      [5, 5],
      [5, 6],
      [5, 7],
      [5, 8],
      [6, 0],
      [6, 1],
      [6, 2],
      [6, 3],
      [6, 4],
      [6, 5],
      [6, 6],
      [6, 7],
      [6, 8],
      [7, 0],
      [7, 1],
      [7, 2],
      [7, 3],
      [7, 4],
      [7, 5]],
    0
  )
]

tests.forEach(t => assert.strictEqual(linesGame(t.f, t.c, t.nb, t.nbc), t.x))
