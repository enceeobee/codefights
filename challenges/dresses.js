const assert = require('assert')

function dresses (colors) {
  let g
  return colors.reduce((acc, val, i) => {
    if ((g = parseInt(val.slice(2, 4), 16)) > parseInt(val.slice(0, 2), 16) && g > parseInt(val.slice(-2), 16)) {
      acc.push(i)
    }

    return acc
  }, [])
}

const makeTest = (c, x) => ({ c, x })
const tests = [
  makeTest(['A0FC77',
    '90CACA'], [0]),

  makeTest(['000000',
    '101110',
    'F01AC3',
    '0FFEF4'], [1, 3]),

  makeTest(['FFFFFF'], []),

  makeTest(['A086C8',
    '3D6D80',
    '98C23A',
    '9BB210'], [2, 3]),

  makeTest(['8192B9',
    '5EA2E1',
    '482787',
    'F6D634',
    'A4A9CC'], []),

  makeTest(['5679EA',
    'A072B9',
    'C11432',
    'B464AD',
    'EF0DAF',
    '99DAD2',
    '278EBE'], [5]),

  makeTest(['E3F5B7',
    '600B4A',
    '9DB75A',
    '44AFA7',
    'E065C0',
    '37665B',
    '89B0F8',
    '37210D'], [0, 2, 3, 5]),

  makeTest(['49BF8D',
    '5C0014',
    'DCDC0B',
    '0F3307',
    '1F0E59',
    'F8F8BD',
    '9E5F02',
    'A9825D',
    'E6FB9D',
    '8247D7'], [0, 3, 8]),

  makeTest(['CAE2CB',
    'A6F14B',
    'C2127B',
    '7E93EF',
    '8D0C66',
    'F33EDB',
    '0FD2AA',
    '862E30',
    '6F4B1D',
    'CBBD4C',
    '827D8B',
    '9D9794',
    'B8EDEF',
    'D37A0E',
    '89BBB9',
    'C666CD',
    'BC0558',
    '9480A3',
    '081A42',
    'D390B3',
    '78D752',
    'E055D2',
    '5737E4',
    '4D8230',
    '4109BC',
    '0C133F',
    '3741CA',
    '7985CD',
    '9F3B4E',
    'FD8090',
    '792851',
    '2D19C9',
    '60B6AF',
    '4987E6',
    '36850F',
    '824BBA',
    'ECA4D7',
    'A1AF16',
    'FE4832',
    '526AFD',
    '67B3CB',
    '062990',
    '5EA78F',
    '8EC567',
    'C79554',
    'EF0539',
    '2FBCFD',
    'FE4073',
    '13C26B',
    '3D8987',
    '6EB66D',
    '5206B7',
    '4A209A',
    'EFBAA8',
    '188CE1',
    'F4E604',
    'C77D56',
    'AE7F22',
    '34DB76',
    '010558',
    'E33DCC',
    '22A8C6',
    '6EF297',
    '9E5087',
    '7F3CF4',
    '25374B',
    '715C71',
    '0A29B5',
    '273A86',
    '105757',
    'E7105F',
    '023B67',
    '53774B',
    '69BF11',
    '55CB35',
    'F5056A',
    '70EEB1',
    '4115EE',
    '9B574E',
    '723730',
    'FEEE28',
    'C97E03',
    '7A6EA7',
    '05E6F9',
    'B5FE81',
    'EC9A06',
    '81F363',
    'E553B4',
    'D82B1B',
    '319F8C',
    'C31334',
    '77F03A',
    'AF8DA4',
    '245804',
    '8AFFC1',
    'BC26C5',
    '5F075D',
    '7B2DD6',
    '27283E',
    '19BFD1'], [0, 1, 6, 14, 20, 23, 32, 34, 37, 42, 43, 48, 49, 50, 58, 62, 72, 73, 74, 76, 84, 86, 89, 91, 93, 94]),

  makeTest(['A85A4E',
    '65CECE',
    '775B37',
    'AD8340',
    'B4A38E',
    'E68502',
    '521030',
    'FA9434',
    '699918',
    'D3ACE6',
    '5F6313',
    '99440C',
    'A2B52B',
    'BFA789',
    '369B85',
    '7A466E',
    'CBD227',
    '6AAC97',
    'FB852A',
    '3C4FCB',
    '1CF083',
    '6BF57F',
    '7D4645',
    'F09880',
    '7D5F04',
    '3F8A2C',
    '62370B',
    '583C2F',
    'DF9533',
    'CE8BA5',
    'D09295',
    'A5EF34',
    '4CE921',
    '560B75',
    '78AB77',
    '730A68',
    '97FE8E',
    'F86F23',
    'CCC518',
    'DC93A7',
    '12834A',
    '7DAD86',
    '55E4B1',
    '813BBE',
    '292405',
    '7F0BA4',
    '3AEBF4',
    'D4C0BB',
    'D7427A',
    '5C8A08',
    '314001',
    '856357',
    'A67CEB',
    '610A3B',
    '76B8D8',
    'A7D503',
    'EBED6E',
    '993C98',
    '698105',
    '94AF2A',
    'A101AA',
    'E8E8B8',
    'DBA3DE',
    '647B11',
    '23E639',
    '05EC0C',
    'E26AB0',
    'A90AB9',
    '3BE8B5',
    'F7ABDA',
    'F67B94',
    'DD77A1',
    'D6DE6D',
    '1EF156',
    '06F99B',
    '81B590',
    '3B076F',
    '37D063',
    '4CA435',
    'EBBCA9',
    '2415C2',
    '200F00',
    '300B92',
    'F5444A',
    'D4105F',
    '30F564',
    'D6ED5C',
    'C6A109',
    '61E025',
    '786409',
    'CFD35B',
    'D14FED',
    'EE86F0',
    '575977',
    'BFB328',
    'D8F14D',
    '9079DC',
    '48AD5D',
    '0C9E35',
    '18055E'], [8, 10, 12, 14, 16, 17, 20, 21, 25, 31, 32, 34, 36, 40, 41, 42, 49, 50, 55, 56, 58, 59, 63, 64, 65, 68, 72, 73, 74, 75, 77, 78, 85, 86, 88, 90, 95, 97, 98]),

  makeTest(['F36600',
    '5D0C00',
    '7CC900',
    'BCCE00',
    '12ED00',
    '289700',
    'A2FE00',
    'F4C900',
    'AFF700',
    'D86500',
    '9E1A00',
    'D96B00',
    '15AA00',
    'E21C00',
    '837D00',
    '7A2200',
    '2C9A00',
    '453A00',
    'ADDB00',
    '14EF00',
    '8B0F00',
    '786D00',
    '6AF300',
    'C4FC00',
    '9A8200',
    '210900',
    'D89B00',
    '028B00',
    '557C00',
    '02E300',
    '10CC00',
    'E83400',
    'AB9600',
    '625D00',
    '549400',
    'EE3400',
    '8C1600',
    '2C8B00',
    'B7C700',
    '601400',
    'EF8B00',
    'D6ED00',
    '055200',
    '3FDA00',
    '3D4000',
    '22E600',
    'E51700',
    '50A200',
    '4E4300',
    'C83C00',
    '814800',
    '39AF00',
    '5C4E00',
    '55F700',
    'C98400',
    'CFEB00',
    '7D6E00',
    'AC1200',
    'F9C500',
    'F00F00',
    '3FF300',
    'BFA300',
    '91E200',
    '433400',
    '052500',
    'FCAE00',
    '68F700',
    '7FAC00',
    '49B800',
    '381500',
    '7A4300',
    'DE0E00',
    'B37800',
    '21A300',
    'A87100',
    '125B00',
    '6C4600',
    '0AC700',
    '82BD00',
    '816C00',
    'BFAC00',
    '507300',
    'D3C200',
    '2D7200',
    '383800',
    '59A400',
    '7BF400',
    '239900',
    '8C6B00',
    'F4BD00',
    '7FDA00',
    '02CF00',
    '0DA700',
    '8F6B00',
    '164F00',
    '38E000',
    'EB0500',
    'DF9200',
    '941500',
    '432600'], [2, 3, 4, 5, 6, 8, 12, 16, 18, 19, 22, 23, 27, 28, 29, 30, 34, 37, 38, 41, 42, 43, 44, 45, 47, 51, 53, 55, 60, 62, 64, 66, 67, 68, 73, 75, 77, 78, 81, 83, 85, 86, 87, 90, 91, 92, 94, 95])

]

tests.forEach(t => assert.deepStrictEqual(dresses(t.c), t.x))
